// Code generated by mockery v2.15.0. DO NOT EDIT.

package openshift

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	v1 "github.com/openshift/client-go/apps/clientset/versioned/typed/apps/v1"
)

// AppsV1Interface is an autogenerated mock type for the AppsV1Interface type
type AppsV1Interface struct {
	mock.Mock
}

// DeploymentConfigs provides a mock function with given fields: namespace
func (_m *AppsV1Interface) DeploymentConfigs(namespace string) v1.DeploymentConfigInterface {
	ret := _m.Called(namespace)

	var r0 v1.DeploymentConfigInterface
	if rf, ok := ret.Get(0).(func(string) v1.DeploymentConfigInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.DeploymentConfigInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *AppsV1Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

type mockConstructorTestingTNewAppsV1Interface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppsV1Interface creates a new instance of AppsV1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppsV1Interface(t mockConstructorTestingTNewAppsV1Interface) *AppsV1Interface {
	mock := &AppsV1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
