// Code generated by mockery v2.15.0. DO NOT EDIT.

package openshift

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	v1 "github.com/openshift/client-go/route/clientset/versioned/typed/route/v1"
)

// RouteV1Interface is an autogenerated mock type for the RouteV1Interface type
type RouteV1Interface struct {
	mock.Mock
}

// RESTClient provides a mock function with given fields:
func (_m *RouteV1Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// Routes provides a mock function with given fields: namespace
func (_m *RouteV1Interface) Routes(namespace string) v1.RouteInterface {
	ret := _m.Called(namespace)

	var r0 v1.RouteInterface
	if rf, ok := ret.Get(0).(func(string) v1.RouteInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.RouteInterface)
		}
	}

	return r0
}

type mockConstructorTestingTNewRouteV1Interface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouteV1Interface creates a new instance of RouteV1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouteV1Interface(t mockConstructorTestingTNewRouteV1Interface) *RouteV1Interface {
	mock := &RouteV1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
