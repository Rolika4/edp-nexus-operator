// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	nexusApi "github.com/epam/edp-nexus-operator/v2/api/v1"
)

// PlatformService is an autogenerated mock type for the PlatformService type
type PlatformService struct {
	mock.Mock
}

// CreateEDPComponentIfNotExist provides a mock function with given fields: instance, url, icon
func (_m *PlatformService) CreateEDPComponentIfNotExist(instance *nexusApi.Nexus, url string, icon string) error {
	ret := _m.Called(instance, url, icon)

	var r0 error
	if rf, ok := ret.Get(0).(func(nexusApi.Nexus, string, string) error); ok {
		r0 = rf(*instance, url, icon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJenkinsServiceAccount provides a mock function with given fields: namespace, secretName
func (_m *PlatformService) CreateJenkinsServiceAccount(namespace string, secretName string) error {
	ret := _m.Called(namespace, secretName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, secretName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSecret provides a mock function with given fields: instance, name, data
func (_m *PlatformService) CreateSecret(instance *nexusApi.Nexus, name string, data map[string][]byte) error {
	ret := _m.Called(instance, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(nexusApi.Nexus, string, map[string][]byte) error); ok {
		r0 = rf(*instance, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigMapData provides a mock function with given fields: namespace, name
func (_m *PlatformService) GetConfigMapData(namespace, name string) (map[string]string, error) {
	ret := _m.Called(namespace, name)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, string) map[string]string); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalUrl provides a mock function with given fields: namespace, name
func (_m *PlatformService) GetExternalUrl(namespace string, name string) (string, string, string, error) {
	ret := _m.Called(namespace, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, string) string); ok {
		r2 = rf(namespace, name)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string) error); ok {
		r3 = rf(namespace, name)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetSecret provides a mock function with given fields: namespace, name
func (_m *PlatformService) GetSecret(namespace string, name string) (*v1.Secret, error) {
	ret := _m.Called(namespace, name)

	var r0 *v1.Secret
	if rf, ok := ret.Get(0).(func(string, string) *v1.Secret); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretData provides a mock function with given fields: namespace, name
func (_m *PlatformService) GetSecretData(namespace string, name string) (map[string][]byte, error) {
	ret := _m.Called(namespace, name)

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func(string, string) map[string][]byte); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDeploymentReady provides a mock function with given fields: instance
func (_m *PlatformService) IsDeploymentReady(instance *nexusApi.Nexus) (*bool, error) {
	ret := _m.Called(*instance)

	var r0 *bool
	if rf, ok := ret.Get(0).(func(nexusApi.Nexus) *bool); ok {
		r0 = rf(*instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(nexusApi.Nexus) error); ok {
		r1 = rf(*instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecret provides a mock function with given fields: secret
func (_m *PlatformService) UpdateSecret(secret *v1.Secret) error {
	ret := _m.Called(secret)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Secret) error); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
