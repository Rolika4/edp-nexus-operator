// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	security "github.com/datadrivers/go-nexus-client/nexus3/schema/security"
)

// Role is an autogenerated mock type for the Role type
type Role struct {
	mock.Mock
}

// Create provides a mock function with given fields: role
func (_m *Role) Create(role security.Role) error {
	ret := _m.Called(role)

	var r0 error
	if rf, ok := ret.Get(0).(func(security.Role) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Role) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Role) Get(id string) (*security.Role, error) {
	ret := _m.Called(id)

	var r0 *security.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*security.Role, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *security.Role); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, role
func (_m *Role) Update(id string, role security.Role) error {
	ret := _m.Called(id, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, security.Role) error); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRole creates a new instance of Role. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRole(t interface {
	mock.TestingT
	Cleanup(func())
}) *Role {
	mock := &Role{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
